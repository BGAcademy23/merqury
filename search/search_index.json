{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Assess genome assemblies with Merqury","text":"<p>This session is part of Biodiversity Genomics Academy 2023</p>"},{"location":"#session-leaders","title":"Session Leader(s)","text":"<p>Arang Rhie Staff Scientist, Genome Informatics Section, National Institutes of Health</p> <p>Steven Solar Bioinformatics Scientist, Genome Informatics Section, National Institutes of Health</p>"},{"location":"#description","title":"Description","text":"<p>By the end of this session you will be able to:</p> <ol> <li>Run Meryl and Merqury yourself</li> <li>Learn how to interpret k-mer histogram and copy-number spectrum plots of haploid, diploid, or poly-ploid genome assemblies</li> <li>Understand QV, completeness, haplotype switch outputs</li> <li>Get familiar with some other useful tools in Meryl or Merqury</li> </ol>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Basic understanding for genome assembly related terminologies, such as QV, N50, NG50, contigs, and scaffolds</p> <p>Please make sure you MEET THE PREREQUISITES and READ THE DESCRIPTION above</p> <p>You will get the most out of this session if you meet the prerequisites above.</p> <p>Please also read the description carefully to see if this session is relevant to you.</p> <p>If you don't meet the prerequisites or change your mind based on the description or are no longer available at the session time, please email tol-training at sanger.ac.uk to cancel your slot so that someone else on the waitlist might attend.</p>"},{"location":"hands-on/","title":"Merqury Hands-On","text":"<p>Get a \"Large\" instance: 8 cores, 16 G RAM, 50 GB Storage</p>"},{"location":"hands-on/#learning-objectives","title":"Learning objectives","text":"<ul> <li>Count kmers</li> <li>Basic histogram and numbers in the kmer db</li> <li>Run Merqury on various assemblies</li> <li>Understand Merqury outputs: QV, spectra-cn, spectra-asm, phase block, switches</li> </ul>"},{"location":"hands-on/#where-is-the-data","title":"Where is the data?","text":"<ul> <li>Download https://genomeark.s3.amazonaws.com/trainingmaterials/BGA2023/Merqury/data.tar.gz under /workspace/ and unzip, untar.</li> <li>We assume all the input is under <code>/workspace/data/</code>.</li> <li>Parental mers: generated from the parental strain assemblies of the falcon-unzip paper (Chin et al., Nat. Methods, 2016).</li> <li>Assembly: generated with verkko, using 50x downsampled HiFi and ONT R10 reads from a synthetic Col-0 and Cvi-0 of the A. thaliana centromere paper (Wlodzimierz et al., Nature, 2023) with and without the full Col-0 and Cvi-0 data as parental genomes.</li> </ul>"},{"location":"hands-on/#counting-k-mers","title":"Counting k-mers","text":"<p>Let\u2019s count the kmers in one assembly. Counting operation works in the same way for reads (<code>.fq.gz</code>). For the sake of time, we are just doing it for one assembly.</p> <pre><code>mkdir -p test &amp;&amp; cd test\nln -s ../data/asm/triocanu_clr/f1_triocanu_col.fasta\nmeryl count k=21 f1_triocanu_col.fasta output test.k21.meryl\n</code></pre>"},{"location":"hands-on/#inspect-childs-read-histogram","title":"Inspect child\u2019s read histogram","text":"<p>Now, let\u2019s inspect the child\u2019s read kmer set.</p> <pre><code>cd ../data/f1/\nmeryl statistics F1.k21.meryl | head\n</code></pre> \ud83d\udca1 How many distinct kmers are in the child\u2019s read? <pre><code>meryl statistics F1.k21.meryl | head\n\nFound 1 command tree.\nNumber of 21-mers that are:\n  unique              220768892  (exactly one instance of the kmer is in the input)\ndistinct            **369212673**  (non-redundant kmer sequences in the input)\npresent            4426650250  (...)\nmissing         4397677298431  (non-redundant kmer sequences not in the input)\nnumber of   cumulative   cumulative     presence\n              distinct     fraction     fraction   in dataset\nfrequency        kmers     distinct        total       (1e-6)\n--------- ------------ ------------ ------------ ------------\n</code></pre>    Why is it much larger than the genome?  <p>Generate the histogram:</p> <pre><code>meryl histogram F1.k21.meryl &gt; F1.k21.hist\n</code></pre> <p>Download <code>F1.k21.hist</code>, and let GenomeScope tell you about this genome.</p>  \ud83d\udca1 What\u2019s the genome size? Level of heterozygosity?   Here is a pre-run GenomeScope result: [http://genomescope.org/genomescope2.0/analysis.php?code=fPC4nXMZtsJF5o5zCPCZ](http://genomescope.org/genomescope2.0/analysis.php?code=fPC4nXMZtsJF5o5zCPCZ)  ![Untitled](https://github.com/BGAcademy23/merqury/assets/12814549/ca58d6a1-7128-4416-98b4-88403b017a15)  Answer: Haploid genome size ~153 Mb. Heterozygisoty level 0.991%."},{"location":"hands-on/#merqury-with-no-parental-data","title":"Merqury with no parental data","text":"<p>Make a new directory, and link the data needed.</p> <pre><code>mkdir -p /workspace/hands-on/verkko_asm/ &amp;&amp; cd /workspace/hands-on/verkko_asm/\n\n# Assembly\nln -s /workspace/data/asm/verkko_hifi/f1_verkko_hifi.fasta\n\n# Read kmer db\nln -s /workspace/data/f1/F1.k21.meryl\n\n# See how to run merqury\n$MERQURY/merqury.sh\nUsage: merqury.sh [-c] &lt;read-db.meryl&gt; [&lt;mat.meryl&gt; &lt;pat.meryl&gt;] &lt;asm1.fasta&gt; [asm2.fasta] &lt;out&gt;\n    -c      : [OPTIONAL] input meryl databases are homopolymer compressed, while asm.fasta isn't\n              This option is not supported for trio-based analysis. Use pre-compressed assemblies with no -c option.\n    &lt;read-db.meryl&gt; : k-mer counts of the read set\n&lt;mat.meryl&gt; : k-mer counts of the maternal haplotype (ex. mat.hapmer.meryl)\n&lt;pat.meryl&gt; : k-mer counts of the paternal haplotype (ex. pat.hapmer.meryl)\n&lt;asm1.fasta&gt;    : Assembly fasta file (ex. pri.fasta, hap1.fasta or maternal.fasta)\n[asm2.fasta]    : Additional fasta file (ex. alt.fasta, hap2.fasta or paternal.fasta)\n*asm1.meryl and asm2.meryl will be generated. Avoid using the same names as the hap-mer dbs\n    &lt;out&gt;       : Output prefix\nArang Rhie, 2022-09-07. arrhie@gmail.com\n</code></pre>"},{"location":"hands-on/#run-merqury-5-10-min","title":"Run Merqury (5-10 min)","text":"<pre><code>$MERQURY/merqury.sh F1.k21.meryl/ f1_verkko_hifi.fasta verkko_asm\n</code></pre>  \u23f3 While waiting\u2026 What kmer size should I use?   Merqury has a simple script that computes the best k-size based on [Fofanov et al., Bioinformatics (2004)]([10.1093/bioinformatics/bth266](https://doi.org/10.1093/bioinformatics/bth266)).  <pre><code>$MERQURY/best_k.sh\nUsage: ./best_k.sh [-c] &lt;genome_size&gt; [tolerable_collision_rate]\n  -c         : [OPTIONAL] evaluation will be on homopolymer compressed genome. EXPERIMENTAL\n  genome_size: Haploid genome size or diploid genome size, depending on what we evaluate. In bp.\n  tolerable_collision_rate: [OPTIONAL] Error rate in the read set. DEFAULT=0.001 for illumina WGS\nSee Fofanov et al. Bioinformatics, 2004 for more details.\n</code></pre>  Depending on the error rate in the reads, the k could be smaller or larger. The only thing to remember is that smaller kmer have a higher collision rate, meaning there is a higher chance the repeats will be less distinguishable. I recommended using k=21 for reasonable sized genomes (~5 Gb) when evaluating CLR-based assemblies. I\u2019d like to note that the k given here is the lower bound of the k-size. Depending on the assembly quality and the bp accuracy of the sequencing read set, it is recommended to increase the k size, e.g. k=31.  For a. thaliana, the haploid genome size was ~153 Mb - so the best k for evaluating a haploid assembly is  <pre><code>$MERQURY/best_k.sh 153000000\ngenome: 153000000\ntolerable collision rate: 0.001\n18.5766\n</code></pre>  For diploid assembly, simply double the genome size as a rough estimate:  <pre><code>$MERQURY/best_k.sh 306000000\ngenome: 306000000\ntolerable collision rate: 0.001\n19.0766\n</code></pre>  We are using k=21 throughout this exercise, which is higher than the suggested 19. The higher the k-mer size, the more conservative the QV becomes."},{"location":"hands-on/#whats-in-the-output","title":"What\u2019s in the output?","text":""},{"location":"hands-on/#qv","title":"QV","text":"<pre><code>cat verkko_asm.qv\n# f1_verkko_hifi    620933  304044764   40.1169 9.73443e-05\n</code></pre>  \ud83d\udca1 What is the QV?   QV is `40.1`. There are `620933` error kmers, kmers never seen in the reads. The assembly has `304044764` kmers. This matches roughly the diploid genome size."},{"location":"hands-on/#spectra-cn-plots","title":"Spectra-cn plots","text":"<p>See <code>verkko_asm.f1_verkko_hifi.spectra-cn.ln.png</code>. This is the \u2018unstacked\u2019, line plot of the kmer spectrum.</p>   \ud83d\udca1 verkko_asm.f1_verkko_hifi.spectra-cn.ln.png   ![verkko_asm f1_verkko_hifi spectra-cn ln](https://github.com/BGAcademy23/merqury/assets/12814549/6255fbc3-3fbe-4e47-aac5-3caab1feea8a)    \ud83d\udca1 How does the assembly spectrum look like?   The kmers seen once (red 1) in the assembly overlap the haploid, 1-cp peak. Likewise, kmers seen twice (blue 2) in the assembly overlap the 2-cp peak. The 3-cp and 4-cp peak are also observed in the expected range, albeit it is hard to clearly distinguish the peaks. In overall, the assembly seems to contain copy numbers as expected, within the 1-4 copy range.  The number of kmers only seen in the assembly (error kmers) are shown as a bar at 0. These are the kmers never seen in the read, thus likely representing a consensus error.  The read-only curve shows kmers present in the read, but never found in the assembly. These kmers are usually occur at low-frequency across the read set, and are likely errors in the sequenced read. One should be alerted when the black line has a \u2018bump\u2019 at 1-cp peak or higher, as those are indicating missing sequences in the assembly. Completeness is measured using these kmers."},{"location":"hands-on/#spectra-asm-plots","title":"Spectra-asm plots","text":"<p>This time, we are interested in the assembly spectrum, regardless of the kmer counts in the assembly. This helps visualize the missing portion of the assembly.</p>  \ud83d\udca1 See verkko_asm.spectra-asm.ln.png   ![verkko_asm spectra-asm ln](https://github.com/BGAcademy23/merqury/assets/12814549/64e25393-0ad5-44a8-a1c4-b836d36c2510)"},{"location":"hands-on/#completeness","title":"Completeness","text":"<p>Merqury uses heuristics to define \u2018reliable\u2019 kmers. Ignoring the low-frequency kmers, this time, Merqury computes how many are observed in the assembly out of the total reliable kmers.</p> <pre><code>cat verkko_asm.completeness.stats f1_verkko_hifi  all 129890454   131495725   98.7792\n</code></pre>  \ud83d\udca1 What\u2019s the threshold used to compute completeness?   See `logs/verkko_asm.spectra-cn.log`.  <pre><code>...\nFilter out kmers &lt;= 5\n...\n</code></pre>  This means we are using kmers seen more than 5 times in the reads as \u2018reliable\u2019. Note there is always a chance a \u2018read-only\u2019 kmer to be seen in the \u2018reliable\u2019 set, regardless of the sequencing depth, due to sequencing errors and biases, which could probabilistically occur at a higher frequency."},{"location":"hands-on/#merqury-with-parental-data","title":"Merqury with parental data","text":""},{"location":"hands-on/#genrate-hap-mers","title":"Genrate hap-mers","text":"<p>This time, we will utilize the parental kmers. The pre-computed meryl dbs are available under <code>/workspace/data/parental/</code>. It is important to run <code>[hapmers.sh](http://hapmers.sh)</code> before using hapmers.</p> <pre><code># Make a new directory, 'hapmers'.\ncd /workspace/hands-on\nmkdir -p hapmers &amp;&amp; cd hapmers\n\n# Link data\nln -s ../../data/f1/F1.k21.meryl           # F1 read kmer\nln -s ../../data/parental/Col-0.k21.meryl/ # Col-0 haplotype genome asm's kmer\nln -s ../../data/parental/Cvi-0.k21.meryl/ # Cvi-0 haplotype genome asm's kmer\n# See how to run hapmers.sh\n$MERQURY/trio/hapmers.sh\n</code></pre>  \ud83d\udca1 How do I generate my hapmers?   Because we are using kmers from haplotype genome\u2019s assemblies, and not directly from the reads, use `-no-filt` option. This is an unusual case, and only done because we are limited from space and time for this session. If possible, count kmers from the parental reads directly and run `hapmers.sh` without the `-no-filt` option.  <pre><code># Run hapmers.sh\n$MERQURY/trio/hapmers.sh Col-0.k21.meryl/ Cvi-0.k21.meryl/ F1.k21.meryl/ -no-filt\n</code></pre>  \ud83d\udca1 What is the intherited, hapmer spectrum?   See `inherited_hapmers.ln.png`.  ![inherited_hapmers ln](https://github.com/BGAcademy23/merqury/assets/12814549/520328df-cb9e-44c4-8df3-63d5e46ca2fc)  Note the roughly 1:1 portion of the hapmers, which nicely covers most of the 1-cp peak. We see this more often in highly diverged sub-species, with minimal shared genomic content between the parents. Compare this to a hapmer obtained from a human:  ![inherited_hapmers ln 1](https://github.com/BGAcademy23/merqury/assets/12814549/653fa2b0-7933-4afc-8400-df3ef48f67ac)  Here, we see a lot less of the mat pat hapmers, and a larger amount of shared kmers in the 1-cp region (10~50x kmer multiplicity). This is likely because the child inherited kmers from the parental genome, which both heterozygous haplotypes are present in the parental genome (Mat had AB and Pat had AB, Child inherited AB) or are not distinguishable (Mat had AA and Pat had AB, Child inherited AB - in this case, A is not distinguishable, only B is.)."},{"location":"hands-on/#running-merqury-with-hapmers-on-a-haplotype-phased-diploid-assembly-20-min","title":"Running Merqury with hapmers on a haplotype phased, diploid assembly (~20 min)","text":"<pre><code>cd ../\nmkdir -p verkko_dip &amp;&amp; cd verkko_dip\n\nln -s ../../data/f1/F1.k21.meryl/\nln -s ../hapmers/Col-0.k21.hapmer.meryl/\nln -s ../hapmers/Cvi-0.k21.hapmer.meryl/\nln -s ../../data/asm/verkko_trio_hifi/f1_verkko_col.fasta ln -s ../../data/asm/verkko_trio_hifi/f1_verkko_cvi.fasta\n\n$MERQURY/merqury.sh F1.k21.meryl/ Col-0.k21.hapmer.meryl/ Cvi-0.k21.hapmer.meryl/ f1_verkko_col.fasta f1_verkko_cvi.fasta verkko_dip\n\nread: F1.k21.meryl\n\nHaplotype dbs provided.\nRunning Merqury in trio mode...\n\nhap1: Col-0.k21.hapmer.meryl\nhap2: Cvi-0.k21.hapmer.meryl\nasm1: f1_verkko_col.fasta\nasm2: f1_verkko_cvi.fasta\nout : verkko_dip\n\nGet spectra-cn plots and QV stats\n\nGet blob plots\n\nGet haplotype specfic spectra-cn plots\n\nGet phase blocks\n...\n</code></pre>"},{"location":"hands-on/#check-qv-completeness-haplotype-switches","title":"Check QV, completeness, haplotype switches","text":"<pre><code>cat verkko_dip.qv\nf1_verkko_col   277023  148586323   40.513  8.88594e-05\nf1_verkko_cvi   213105  154022987   41.8092 6.59288e-05\nBoth    490128  302609310   41.1246 7.71868e-05\n</code></pre> <p>This time, we have QV for each and both assemblies combined.</p> <pre><code>cat verkko_dip.completeness.stats f1_verkko_col   all 108663696   131495725   82.6367\nf1_verkko_cvi   all 108589169   131495725   82.58\nboth    all 129889048   131495725   98.7782\nf1_verkko_col   Col-0.k21.hapmer    21749217    21760542    99.948\nf1_verkko_col   Cvi-0.k21.hapmer    322137  21623509    1.48975\nf1_verkko_cvi   Col-0.k21.hapmer    579708  21760542    2.66403\nf1_verkko_cvi   Cvi-0.k21.hapmer    21401749    21623509    98.9744\nboth    Col-0.k21.hapmer    21751138    21760542    99.9568\nboth    Cvi-0.k21.hapmer    21610226    21623509    99.9386\n</code></pre> <p>The first three lines show completeness (%) per assembly and both, as the portion of reliable kmers found in the reads. The rest are shown per-hapmers.</p> <p>f1_verkko_col   Col-0.k21.hapmer - here we expect only Col-0 kmers to be found. However, the next line, f1_verkko_col   Cvi-0.k21.hapmer indicates there are 1.49% of the Cvi-0 hapmers found in the col assembly, which is likely a switch error. Likewise, f1_verkko_cvi  Col-0.k21.hapmer shows unexpected Col-0 hapmers found in the cvi assembly.</p> <p>both lines at the bottom shows the haplotype completeness regardless of each assembly.</p> <p><pre><code>cat verkko_dip.*.switches.txt\nverkko_dip.f1_verkko_col.100_20000 switch error rate (%) (Num. switches / Total markers found): 261481  25730538    1.01623%\nverkko_dip.f1_verkko_cvi.100_20000 switch error rate (%) (Num. switches / Total markers found): 661467  25227589    2.622%\n</code></pre> Merqury automatically tries to find locally phased blocks given the marker presence. By default, Merqury allows up to\u00a0100 switches within\u00a020kb, roughly translated into allowing maximum of 0.5% of short-range switches within a minimum of ~20kb window. Once the phase blocks are defined, the num. observed switches (unexpected hapmers) are counted for calculating the switch error rate (%). Here, we see col assembly has switch error rate of 1.0%, while the cvi assembly has slightly higher, 2.6%. Find more details here.</p>"},{"location":"hands-on/#visualizing-phase-switches","title":"Visualizing phase switches","text":"<p>The most intuitive way in Merqury to visualize phase switches is via blob-plot. See <code>verkko_dip.hapmers.blob.png</code>.</p> <p></p> <p>Each circle represents a scaffold, with the circle size relative to the length. The better the assembly is haplotype resolved, we see the circles plotted along the X and Y axis, which indicates the num. of hapmers found in each scaffold.</p> <p>There are a few off-axis circles, indicating switch error in the assembly.</p> <p>Next, we can check how large the phased blocks are. See <code>verkko_dip.f1_verkko_cvi.block.N.png</code>.</p> <p></p> <p>We see there are a few &lt;~1 Mb blocks consisting of Col hapmers. Where are they in the assembly?</p>"},{"location":"hands-on/#lets-visualize-hapmers-on-igv","title":"\ud83d\udca1\u00a0Let\u2019s visualize hapmers on IGV","text":"<p>Concatenate each hapmer track to easily visualize on the diploid assembly.</p> <pre><code>cat *Col-0.k21.hapmer.wig &gt; verkko_dip.Col-0.k21.hapmer.wig\ncat *Cvi-0.k21.hapmer.wig &gt; verkko_dip.Cvi-0.k21.hapmer.wig\n</code></pre>"},{"location":"hands-on/#on-igv","title":"On IGV","text":"<p>Under <code>Genomes</code>, <code>Load Genome from URL</code>: <code>https://genomeark.s3.amazonaws.com/trainingmaterials/BGA2023/Merqury/hands-on/verkko_dip.fasta</code></p> <p>Download the verkko_dip.C*-0.k21.hapmer.wig files, or load from URL:</p> <ul> <li>Under <code>File</code>, <code>Load from URL</code>:<ul> <li>https://genomeark.s3.amazonaws.com/trainingmaterials/BGA2023/Merqury/hands-on/verkko_dip/verkko_dip.Col-0.k21.hapmer.wig</li> <li>https://genomeark.s3.amazonaws.com/trainingmaterials/BGA2023/Merqury/hands-on/verkko_dip/verkko_dip.Cvi-0.k21.hapmer.wig</li> </ul> </li> </ul> <p>Also create the error kmer track from *_only.wig:</p> <pre><code>cat *_only.wig &gt; verkko_dip.error.wig\n</code></pre> <p>Again, load it directly or load from URL:</p> <ul> <li>https://genomeark.s3.amazonaws.com/trainingmaterials/BGA2023/Merqury/hands-on/verkko_dip/verkko_dip.error.wig</li> </ul> <p>\ud83d\udca1Tip: Give colors as you\u2019d like for each track. </p>"}]}